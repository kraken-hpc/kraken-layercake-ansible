---
- name: Install podman
  become: true
  package:
    name:
      - podman
      - git
    state: present

# - name: Pull latest virt image of kraken-layercake
#   become: true
#   containers.podman.podman_image:
#     name: docker.io/krakenhpc/kraken-layercake
#     tag: '{{ "virt-latest" if kr_with_vbox else "latest" }}'

- name: go get kraken-layercake
  git:
    repo: "{{ kr_repo }}"
    dest: "{{ kr_src_dir }}"
    version: "{{ kr_repo_version }}"

# - name: Create layer0-base.gz
#   command: |
#     /bin/bash {{ kr_base_script }}
#     -o {{ kr_tftp_dir }}/layer0-base.gz
#     -t /tmp/layer0-base
#     -k -g
#     amd64
#     {{ "github.com/kraken-hpc/kraken-layercake/cmd/kraken-layercake-virt" if kr_with_vbox else "" }}
#   args:
#     creates: "{{ kr_tftp_dir}}/layer0-base.gz"

- name: Create layer0-kmod.gz
  command: |
    /bin/bash {{ kr_kmod_script }}
    -o {{ kr_tftp_dir }}/layer0-kmod.{{ kern_out.stdout }}.gz
    -t /tmp/layer0-kmod
    -k -g
    {{ "-a" if kr_kmod_all else "" }}
    {{ kern_out.stdout }}
    {{ kr_kmod_modules|join(' ') }}
  args:
    creates: "{{ kr_tftp_dir }}/layer0-kmod.{{ kern_out.stdout }}.gz"

# setup config
- name: Create image SSH keys
  command: ssh-keygen -N "" -f id_rsa
  args:
    chdir: "{{ kr_config_base }}"
    creates: id_rsa

- name: Create authorized_keys
  copy:
    src: "{{ kr_config_base }}/id_rsa.pub"
    dest: "{{ kr_config_base }}/authorized_keys"
    remote_src: true
    mode: 0600

- name: Create entropy.dat for child VMs
  command: "dd if=/dev/urandom of={{ kr_config_base }}/entropy.dat bs=1k count=4"
  args:
    creates: "{{ kr_config_base }}/random_seed.dat"

- name: Create layer0-config.gz
  command: |
    /bin/bash {{ kr_config_script }}
    -o {{ kr_tftp_dir }}/layer0-config.gz
    -t /tmp/layer0-config
    -k -g
    {{ kr_config_base }}
  args:
    creates: "{{ kr_tftp_dir }}/layer0-config.gz"

- name: Write the kraken runtime configuration file
  become: true
  shell:
    cmd: >
      podman run {{ layercake_image }}:{{ "virt-latest" if kr_with_vbox else "latest" }} 
      -printrc 
      -id "{{ kraken_id }}" 
      -ip "{{ kraken_ip }}" 
      -ipapi "{{ kraken_ipapi }}" 
      -log "{{ kraken_loglevel }}" 
      -state "{{ kraken_state_file }}" 
      > /etc/kraken/{{ "layercake-virt" if kr_with_vbox else "layercake" }}/config.yaml
      && touch /etc/kraken/.ansible_config
    creates: /etc/kraken/.ansible_config

- name: Create Kraken container
  become: true
  register: container_output
  containers.podman.podman_container:
    name: '{{ "kraken-layercake-virt" if kr_with_vbox else "kraken-layercake" }}'
    image: '{{ layercake_image }}:{{ "virt-latest" if kr_with_vbox else "latest" }}'
    state: created
    volume:
      - /home/vagrant/tftp/amd64/vbox:/tftp/amd64/vbox
      - /etc/kraken:/etc/kraken
    network: host
    # cmd_args: --sdnotify=container
    command:
      - -config
      - /etc/kraken/{{ "layercake-virt" if kr_with_vbox else "layercake" }}/config.yaml
      # - -sdnotify
      - -noprefix

- set_fact: container_id={{ container_output.container.Id }}
